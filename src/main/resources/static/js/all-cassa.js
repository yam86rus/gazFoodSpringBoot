table = document.querySelector('table');
console.log(table);

function generateRandomInt(max, min = 0) {
    return Math.floor(Math.random() * (max - min + 1) + min);
}

/**
 * This method will return a new method, when the returned method is
 * called it will return a unique color. Subsequent calls to the color
 * generator will never return the same color.
 */
function colorGenerator() {
    // Create a Set at the function scope which we can use to keep
    // track of the colors generated by the returned method.
    const
        generatedColors = new Set();

    return () => {
        let randomColor;
        // Keep generating a random color in the format "rgb(R,G,B)" until
        // a color is generated that doesn't yet exist in the set. This doesn't
        // take into account that at some point you'll run out of
        // possible colors (but it will take 16M+ tries).
        do {
            randomColor = `rgb(${generateRandomInt(255)},${generateRandomInt(255)},${generateRandomInt(255)})`;
        } while (generatedColors.has(randomColor));

        // Add the generated, unique, color to the set.
        generatedColors.add(randomColor);

        // Return the random color.
        return randomColor;
    };
}

function highlightDoubles(table) {
    const
        // Get all the element with the content CSS class.
        contentCells = table.querySelectorAll('.content'),
        // Create map, the cell content will be the key and the value will be
        // an array with cells that have the key as content.
        contentMap = new Map();

    // IE doesn't support forEach on a NodeList, convert it to an array first.
    Array.from(contentCells).forEach(cell => {
        const
            // For each cell check if the content has been encountered before. If so
            // return the map value and else create a new array.
            array = (contentMap.has(cell.textContent))
                ? contentMap.get(cell.textContent)
                : [];
        // Push the current cell into the array.
        array.push(cell)
        // Store the array in the map.
        contentMap.set(cell.textContent, array);
    });

    // Create a color generator, it will create a random
    // color but never the same color twice.
    const
        randomColor = colorGenerator();

    // Iterate over all the entries in the map, each entry is a unique
    // cell content text
    contentMap.forEach(cells => {
        // When the lengths of the cells array is less than 2 it means
        // it is not multiple times in the table. Exit now.
        if (cells.length < 2) {
            return;
        }

        // Generate a random color for the current content text. This is just
        // a very naive implementation. It doesn't make any promises on readability.
        const
            color = randomColor();

        // Apply the random color to all the cells with the same content.
        cells.forEach(cell => {
            cell.style.backgroundColor = color;
        });
    });
}

highlightDoubles(document.getElementById('sortable'));